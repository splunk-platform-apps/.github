name: Create Repo from Issue

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write

jobs:
  handle-issue:
    environment: create-repo-from-issue
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Check if user is member of authorized team
      - uses: tspascoal/get-user-teams-membership@v3
        id: checkUserMember
        with:
          username: ${{ github.event.comment.user.login }}
          team: 'admins'
          GITHUB_TOKEN: ${{ secrets.PRIVATE_KEY }}

      # Check authorization and command
      - name: Verify authorization and command
        run: |
          if [ "${{ steps.checkUserMember.outputs.isTeamMember }}" != "true" ]; then
            echo "User ${{ github.event.comment.user.login }} is not authorized to trigger this workflow"
            echo "Only members of the admins team can use the /generate_repo command"
            exit 1
          fi
          
          if ! echo '${{ github.event.comment.body }}' | grep -q '/generate_repo'; then
            echo "Comment does not contain the required '/generate_repo' command"
            exit 1
          fi
          
          echo "User authorized and command verified"

      - uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          issue-body: ${{ github.event.issue.body }}
          template-path: .github/ISSUE_TEMPLATE/component_request.yaml

      - run: echo '${{ steps.issue-parser.outputs.jsonString }}' > issue-form.json
      - run: cat issue-form.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install cookiecutter
        run: pip install cookiecutter

      - name: Generate project from template
        run: |
          mkdir -p generated
          COMPONENT_NAME=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.component_name')
          code_owners_raw=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.code_owners')
          if [[ "$code_owners_raw" == *", "* ]]; then
            IFS=', ' read -ra CODE_OWNERS <<< "$code_owners_raw"
          elif [[ "$code_owners_raw" == *" "* ]]; then
            IFS=' ' read -ra CODE_OWNERS <<< "$code_owners_raw"
          elif [[ "$code_owners_raw" == *","* ]]; then
            IFS=',' read -ra CODE_OWNERS <<< "$code_owners_raw"
          else
            CODE_OWNERS=($code_owners_raw)
          fi
          FRAMEWORK_TOOLS=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.framework_tools')
          INTEGRATION=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.integration')
          ABOUT=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.about')
          cookiecutter ./actions/template-addon-cookie-cutter --no-input --output-dir generated \
            component_name="$COMPONENT_NAME" \
            code_owners="$CODE_OWNERS" \
            framework_tools="$FRAMEWORK_TOOLS" \
            integration="$INTEGRATION" \
            about="$ABOUT"

      - name: See generated folder content
        run: |
          COMPONENT_NAME=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.component_name')
          cd generated/"$COMPONENT_NAME"
          ls -la
          echo "Generated project: $COMPONENT_NAME"

      - name: Set component name
        id: component-name
        run: |
          COMPONENT_NAME=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.component_name')
          echo "component_name=$COMPONENT_NAME" >> $GITHUB_OUTPUT
          echo "Will create repository: splunk-platform-apps/$COMPONENT_NAME"

      # Use the App token for all gh/api calls from here on
      - name: Check if repository exists
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_KEY }}
        run: |
          REPO_NAME="${{ steps.component-name.outputs.component_name }}"
          echo "Checking if repository splunk-platform-apps/$REPO_NAME exists..."
          if gh repo view splunk-platform-apps/$REPO_NAME &>/dev/null; then
            echo "Repository splunk-platform-apps/$REPO_NAME already exists!"
            exit 1
          else
            echo "Repository name is available: splunk-platform-apps/$REPO_NAME"
          fi

      - name: Create GitHub repository (org)
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_KEY }}
        run: |
          REPO_NAME="${{ steps.component-name.outputs.component_name }}"
          echo "Creating repository: splunk-platform-apps/$REPO_NAME"
          gh api -X POST "orgs/splunk-platform-apps/repos" \
            -f name="$REPO_NAME" \
            -f private=false \
            -f description="Splunk Add-On: $REPO_NAME - Generated from cookiecutter template" \
            -f visibility=public
          echo "Repository created successfully!"

      # Push generated content using HTTPS with token (no gh --clone needed)
      - name: Push generated content to new repository
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_KEY }}
        run: |
          REPO_NAME="${{ steps.component-name.outputs.component_name }}"
          cd generated/"$REPO_NAME"

          git init
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add remote origin
          git remote add origin https://x-access-token:${GH_TOKEN}@github.com/splunk-platform-apps/$REPO_NAME.git
          
          # Create commit message
          CODE_OWNERS=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.code_owners')
          FRAMEWORK=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.framework_tools')
          INTEGRATION=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.integration')
          ABOUT=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.about')
          
          # Add all files and commit
          git add .
          git commit -m "Initial commit: Generated from cookiecutter template"
          git branch -M main
          git push -u origin main
